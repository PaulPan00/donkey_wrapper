#==== IMPORTS ====#
import os
import logging
import warnings
import numpy as np

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
logging.getLogger('tensorflow').setLevel(logging.FATAL)
warnings.filterwarnings("ignore")

#======== YOLO ========#
DECODER_DICT = {
    0: "solids",
    1: "strips",
    2: "8-ball",
    3: "cue-ball",
    4: "cue-tip"
}


#======== COLORS ========#
BLACK = (0, 0, 0)
GRAY = (127, 127, 127)
WHITE = (255, 255, 255)
RED = (255, 0, 0) 
GREEN = (0, 255, 0) 
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0) 
MAGENTA = (0, 255, 255) 
CYAN = (255, 0, 255)


#======== IMAGE MASKS ========#
BALL_MASK = ((0, 0, 68), (92, 255, 255))
BALL_MASK_2 = ((102, 28, 56), (144, 255, 255))
BALL_MASK_3 = ((78, 78, 0), (108, 255, 255))
CUE_MASK = ((15, 0, 159), (74, 111, 255))


#======== TABLE LOCATION ========#
ZOOM_MULTIPLIER = 1.1

BALL_RADIUS = int(10 * ZOOM_MULTIPLIER)
WIDTH, HEIGHT = 1120, 620

# diamonds: top-left -> top-right -> bottom-right -> bottom-left -> top-left
RAIL_DIST = 30
DIAMONDS = (np.array([(185, RAIL_DIST), (310, RAIL_DIST), (435, RAIL_DIST), (685, RAIL_DIST), (810, RAIL_DIST), (935, RAIL_DIST), (WIDTH - RAIL_DIST, 185), (WIDTH - RAIL_DIST, 310), (WIDTH - RAIL_DIST, 435), (935, HEIGHT - RAIL_DIST), (810, HEIGHT - RAIL_DIST), (685, HEIGHT - RAIL_DIST), (435, HEIGHT - RAIL_DIST), (310, HEIGHT - RAIL_DIST), (185, HEIGHT - RAIL_DIST), (RAIL_DIST, 435), (RAIL_DIST, 310), (RAIL_DIST, 185)]) * ZOOM_MULTIPLIER).astype(int)

REAL_DIAMONDS = ((424, 228), (584, 227), (743, 230), (1053, 236), (1205, 237), (1354, 240), (1539, 431), (1542, 581), (1543, 734), (1359, 929), (1209, 934), (1053, 936), (738, 942), (576, 946), (414, 948), (208, 747), (213, 585), (214, 424))

# rails: left, right, top, bottom
DIST_FROM_EDGE_TO_RAIL = 65
RAIL_LOCATION = (np.array([DIST_FROM_EDGE_TO_RAIL, WIDTH - DIST_FROM_EDGE_TO_RAIL, DIST_FROM_EDGE_TO_RAIL, HEIGHT - DIST_FROM_EDGE_TO_RAIL]) * ZOOM_MULTIPLIER).astype(int)

# pockets
POCKET_RADIUS = 22
SIDE_POCKET_DIST = 52
CORNER_POCKET_DIST = 67
POCKET_LOCATION = (np.array([(CORNER_POCKET_DIST, CORNER_POCKET_DIST), (WIDTH // 2, SIDE_POCKET_DIST), (WIDTH - CORNER_POCKET_DIST, CORNER_POCKET_DIST), (CORNER_POCKET_DIST, HEIGHT - CORNER_POCKET_DIST), (WIDTH // 2, HEIGHT - SIDE_POCKET_DIST), (WIDTH - CORNER_POCKET_DIST, HEIGHT - CORNER_POCKET_DIST)]) * ZOOM_MULTIPLIER).astype(int)

# side pocket covering zone
SIDE_RAIL_POCKET_BUFFER = 65
SIDE_POCKET_DIAMETER = 55
SIDE_POCKET_DEGREES = 25
SIDE_POCKET_HEIGHT = (WIDTH / 2 - SIDE_POCKET_DIAMETER / 2) * np.tan(np.radians(SIDE_POCKET_DEGREES))
SIDE_POCKET_LOCATION = (np.array([(WIDTH // 2, HEIGHT - SIDE_POCKET_DIST), (WIDTH // 2, SIDE_POCKET_DIST)]) * ZOOM_MULTIPLIER).astype(int)
SIDE_POCKET_BOUNDARY = (np.array([(DIST_FROM_EDGE_TO_RAIL + SIDE_RAIL_POCKET_BUFFER, SIDE_POCKET_HEIGHT + DIST_FROM_EDGE_TO_RAIL), (WIDTH / 2 - SIDE_POCKET_DIAMETER / 2, DIST_FROM_EDGE_TO_RAIL), (WIDTH / 2 + SIDE_POCKET_DIAMETER / 2, DIST_FROM_EDGE_TO_RAIL), (WIDTH - DIST_FROM_EDGE_TO_RAIL - SIDE_RAIL_POCKET_BUFFER, SIDE_POCKET_HEIGHT + DIST_FROM_EDGE_TO_RAIL), (WIDTH - DIST_FROM_EDGE_TO_RAIL - SIDE_RAIL_POCKET_BUFFER, HEIGHT - (SIDE_POCKET_HEIGHT + DIST_FROM_EDGE_TO_RAIL)), (WIDTH / 2 + SIDE_POCKET_DIAMETER / 2, HEIGHT - DIST_FROM_EDGE_TO_RAIL), (WIDTH / 2 - SIDE_POCKET_DIAMETER / 2, HEIGHT - DIST_FROM_EDGE_TO_RAIL), (DIST_FROM_EDGE_TO_RAIL + SIDE_RAIL_POCKET_BUFFER, HEIGHT - (SIDE_POCKET_HEIGHT + DIST_FROM_EDGE_TO_RAIL))]) * ZOOM_MULTIPLIER).astype(int)

